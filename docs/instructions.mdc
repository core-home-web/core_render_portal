# Core Render Portal

## Purpose

The Core Render Portal is an internal tool designed to streamline the management of 3D render projects. It provides a structured workflow for creating, organizing, and tracking render requests with detailed specifications for items, parts, and materials.

## Architecture

### Tech Stack
- **Frontend**: Next.js 14 with App Router, TypeScript, Tailwind CSS
- **UI Components**: shadcn/ui with Radix UI primitives
- **Forms**: React Hook Form with Zod validation
- **Database**: Supabase (PostgreSQL) with real-time capabilities
- **Storage**: Supabase Storage for file uploads
- **Testing**: Vitest with React Testing Library
- **Code Quality**: ESLint, Prettier, Husky pre-commit hooks

### Project Structure
```
core_render_portal/
â”œâ”€â”€ app/                    # Next.js App Router pages
â”‚   â”œâ”€â”€ (pages)/           # Route groups
â”‚   â”œâ”€â”€ api/               # API routes
â”‚   â”œâ”€â”€ dashboard/         # Project listing
â”‚   â”œâ”€â”€ project/           # Project management
â”‚   â””â”€â”€ globals.css        # Global styles
â”œâ”€â”€ components/            # Reusable UI components
â”‚   â””â”€â”€ ui/               # shadcn/ui components
â”œâ”€â”€ hooks/                 # Custom React hooks
â”œâ”€â”€ lib/                   # Utility functions & clients
â”œâ”€â”€ types/                 # TypeScript types & Zod schemas
â”œâ”€â”€ tests/                 # Test files
â””â”€â”€ docs/                  # Documentation
```

### Data Flow
1. **Form Creation**: Multi-step form with validation
2. **Data Storage**: Supabase PostgreSQL with structured JSON
3. **File Uploads**: Supabase Storage with organized buckets
4. **Real-time Updates**: Supabase real-time subscriptions
5. **API Integration**: RESTful endpoints for CRUD operations

## Features

### MVP Features âœ…
- [x] Multi-step project creation form
- [x] Project dashboard with listing
- [x] Individual project view (read-only)
- [x] Supabase integration (auth + database + storage)
- [x] Form validation with Zod
- [x] Responsive UI with shadcn/ui
- [x] TypeScript throughout
- [x] Testing setup with Vitest
- [x] Code quality tools (ESLint, Prettier, Husky)

### Form Steps
1. **Project Details**: Title, retailer information
2. **Items**: Add items to render with hero images
3. **Parts**: Configure parts for each item (finish, color, texture, files)
4. **Review**: Final review and submission

## Local Development

### Prerequisites
- Node.js 18+ 
- pnpm (recommended) or npm
- Supabase account and project

### Setup Instructions

1. **Clone and Install**
   ```bash
   git clone <repository-url>
   cd core-render-portal
   pnpm install
   ```

2. **Environment Configuration**
   ```bash
   cp env.example .env.local
   ```
   
   Add your Supabase credentials to `.env.local`:
   ```env
   NEXT_PUBLIC_SUPABASE_URL=your_supabase_project_url
   NEXT_PUBLIC_SUPABASE_ANON_KEY=your_supabase_anon_key
   SUPABASE_SERVICE_ROLE_KEY=your_supabase_service_role_key
   ```

3. **Database Setup**
   
   Create the following table in your Supabase project:
   ```sql
   CREATE TABLE projects (
     id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
     title TEXT NOT NULL,
     retailer TEXT NOT NULL,
     items JSONB DEFAULT '[]',
     created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
     updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
   );
   
   -- Enable Row Level Security (optional)
   ALTER TABLE projects ENABLE ROW LEVEL SECURITY;
   ```

4. **Start Development Server**
   ```bash
   pnpm dev
   ```
   
   Visit http://localhost:3000

### Available Scripts
- `pnpm dev` - Start development server
- `pnpm build` - Build for production
- `pnpm start` - Start production server
- `pnpm lint` - Run ESLint
- `pnpm lint:fix` - Fix ESLint errors
- `pnpm format` - Format code with Prettier
- `pnpm test` - Run tests
- `pnpm test:ui` - Run tests with UI
- `pnpm test:coverage` - Run tests with coverage

## Database Schema

### Projects Table
```sql
CREATE TABLE projects (
  id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
  title TEXT NOT NULL,
  retailer TEXT NOT NULL,
  items JSONB DEFAULT '[]',
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);
```

### JSON Structure for Items
```json
{
  "items": [
    {
      "id": "uuid",
      "name": "Item Name",
      "hero_image": "https://example.com/image.jpg",
      "parts": [
        {
          "id": "uuid",
          "name": "Part Name",
          "finish": "Matte",
          "color": "Red",
          "texture": "Smooth",
          "files": ["file1.jpg", "file2.jpg"]
        }
      ]
    }
  ]
}
```

## API Endpoints

### POST /api/project
Creates a new project with validated data.

**Request Body:**
```json
{
  "title": "Project Title",
  "retailer": "Retailer Name",
  "items": [...]
}
```

**Response:**
```json
{
  "id": "uuid",
  "title": "Project Title",
  "retailer": "Retailer Name",
  "items": [...],
  "created_at": "2024-01-01T00:00:00Z",
  "updated_at": "2024-01-01T00:00:00Z"
}
```

## Testing

### Running Tests
```bash
# Run all tests
pnpm test

# Run tests with UI
pnpm test:ui

# Run tests with coverage
pnpm test:coverage
```

### Test Structure
- **Unit Tests**: Component and utility function tests
- **Integration Tests**: API route and database interaction tests
- **Schema Tests**: Zod validation tests

## Code Quality

### Pre-commit Hooks
Husky automatically runs:
- ESLint with auto-fix
- Prettier formatting
- Type checking

### Linting Rules
- TypeScript strict mode
- React hooks rules
- Import organization
- Consistent formatting

## Future Backlog

### Phase 2 Features ðŸš§
- [ ] User authentication and authorization
- [ ] File upload functionality with drag & drop
- [ ] Project status tracking (draft, in-progress, completed)
- [ ] Comments and collaboration features
- [ ] Export functionality (PDF, CSV)
- [ ] Advanced filtering and search
- [ ] Real-time notifications
- [ ] Project templates and cloning

### Phase 3 Features ðŸ“‹
- [ ] Integration with 3D rendering services
- [ ] Automated render queue management
- [ ] Cost estimation and billing
- [ ] Client portal for external access
- [ ] Advanced analytics and reporting
- [ ] Mobile-responsive PWA
- [ ] Multi-language support
- [ ] Advanced project workflows

### Technical Improvements
- [ ] Performance optimization (React Query, SWR)
- [ ] Advanced caching strategies
- [ ] Error boundary implementation
- [ ] Accessibility improvements (WCAG 2.1)
- [ ] SEO optimization
- [ ] Progressive Web App features
- [ ] Advanced testing (E2E with Playwright)

## Contributing

### Development Workflow
1. Create feature branch from `main`
2. Implement changes with tests
3. Run linting and formatting
4. Submit pull request
5. Code review and merge

### Code Standards
- Follow TypeScript strict mode
- Use functional components with hooks
- Implement proper error handling
- Write comprehensive tests
- Document complex functions
- Follow naming conventions

## Deployment

### Production Build
```bash
pnpm build
pnpm start
```

### Environment Variables
Ensure all required environment variables are set in production:
- `NEXT_PUBLIC_SUPABASE_URL`
- `NEXT_PUBLIC_SUPABASE_ANON_KEY`
- `SUPABASE_SERVICE_ROLE_KEY`
- `NEXT_PUBLIC_APP_URL`

### Recommended Hosting
- Vercel (recommended for Next.js)
- Netlify
- Railway
- AWS/GCP with custom setup

## Support

For questions or issues:
1. Check existing documentation
2. Review test cases for examples
3. Create issue with detailed description
4. Contact development team

---

*Last updated: January 2024*
description:
globs:
alwaysApply: false
---
